type AssetBalance @entity {
  id: ID!
  amount: BigInt!
  router: Router!
  assetId: Bytes!
  supplied: BigInt!
  removed: BigInt!
  locked: BigInt!
  volume: BigInt!
  volumeIn: BigInt!
}

# Router represents a router and its associated liquidity
type Router @entity {
  id: ID!
  assetBalances: [AssetBalance!]! @derivedFrom(field: "router")
}

type HourlyMetric @entity {
  # unique hourly id per asset created by dividing timestamp by 3600 and concatenating assetId
  id: ID!
  # timestamp rounded down to nearest hour
  hourStartTimestamp: BigInt!
  # assetId
  assetId: String!
  # hourly volume per asset
  volume: BigInt!
  # number of completed transactions with this chain as the sending chain
  sendingTxCount: BigInt!
  # number of completed transactions with this chain as the receiving chain
  receivingTxCount: BigInt!
  # cancelled transactions in an hour
  cancelTxCount: BigInt!
  # hourly volume inbound from sending chain per asset
  volumeIn: BigInt!
}

type DayMetric @entity {
  # unique hourly id per asset created by dividing timestamp by 86400 and concatenating assetId
  id: ID!
  # timestamp rounded down to nearest hour
  dayStartTimestamp: BigInt!
  # assetId
  assetId: String!
  # day volume per asset
  volume: BigInt!
  # number of completed transactions with this chain as the sending chain
  sendingTxCount: BigInt!
  # number of completed transactions with this chain as the receiving chain
  receivingTxCount: BigInt!
  # cancelled transactions in a day
  cancelTxCount: BigInt!
  # daily volume inbound from sending chain per asset
  volumeIn: BigInt!
}
